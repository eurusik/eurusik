name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --prefer-offline

    - name: Run linter
      run: npm run lint
      continue-on-error: true

  docker-build:
    needs: lint-and-test
    runs-on: ubuntu-latest
    
    permissions:
      packages: read

    outputs:
      image-tag: ${{ steps.image-tag.outputs.tag }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Generate image tag
      id: image-tag
      run: |
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        TAG="${SHORT_SHA}-$(date +%s)"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT
        echo "Generated tag: ${TAG}"

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:latest
          network=host

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ steps.image-tag.outputs.tag }}
          type=raw,value=latest
          type=sha,prefix={{branch}}-

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1
        outputs: type=docker,dest=/tmp/image.tar

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: /tmp/image.tar
        retention-days: 1

  docker-push:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      packages: write

    outputs:
      image-tag: ${{ needs.docker-build.outputs.image-tag }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for multi-platform push
      id: meta-push
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=raw,value=${{ needs.docker-build.outputs.image-tag }}
          type=raw,value=latest
          type=sha,prefix={{branch}}-

    - name: Build and push ARM64 image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/arm64
        push: true
        tags: ${{ steps.meta-push.outputs.tags }}
        labels: ${{ steps.meta-push.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-k8s-manifest:
    needs: docker-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Update Kubernetes manifest
      env:
        IMAGE_TAG: ${{ needs.docker-push.outputs.image-tag }}
      run: |
        sed -i "s|image: ghcr.io/eurusik/eurusik:.*|image: ghcr.io/eurusik/eurusik:${IMAGE_TAG}|g" k8s/deployment.yaml
        echo "Updated image tag to: ${IMAGE_TAG}"

    - name: Commit and push changes
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git add k8s/deployment.yaml
        git commit -m "chore: update image tag to ${{ needs.docker-push.outputs.image-tag }}" || echo "No changes to commit"
        git push || echo "No changes to push"
